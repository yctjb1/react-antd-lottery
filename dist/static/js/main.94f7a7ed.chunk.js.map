{"version":3,"sources":["pages/HomePage/index.tsx","components/SettingModal.tsx","pages/router.tsx","App.tsx","serviceWorker.ts","index.tsx","utils/handleExcel.ts"],"names":["Option","Select","getRandomInt","min","max","Math","ceil","floor","random","props","useState","tcRunning","settingModal","tcOptions","setTCOptions","awards","awardlevel","awardname","awardnum","key","currentAwardKey","currentAwardLeft","awardOptions","setAwardOptions","awardeePlayers","members","usercode","username","currentplayers","memberOptions","setMemberOptions","reducemode","shownowresult","active_resultsNumber","result","lotterOptions","setLotterOptions","useEffect","queryLocalStorage","Object","assign","maxNum","createOption","updateCurrentAwardLeft","initTC","str","eval","changeSpeed","status","handleSettingModal","backFromChild","new_awardOptions","new_memberOptions","resetFlag","filter","item","prevMembers","newMembers","prevAwards","newAwards","invariant_members","intersectionWith","isEqual","delete_prevmodify_members","differenceWith","add_newmodify_members","delete_prevmodify_members_keys","map","add_newmodify_members_keys","newmodify_members","indexOf","prevmodify_members","invariant_awards","delete_prevmodify_awards","add_newmodify_awards","delete_prevmodify_awards_keys","add_newmodify_awards_keys","newmodify_awards","prevmodify_awards","delete_awardKeys","new_lotterOptions","JSON","parse","stringify","delete_result_members","index","awardKey","push","awardeeArr","uniqWith","length","new_currentAward","slice","newMembers_keys","now_result_item","exist_num","maxAwardNum","Number","handleChangeAward","val","newindex","data","handleStop","leftAwardNum","maxMembers","leftplayersNumber","now_awardIndex","new_result","result_prev_awardees","random_num","new_awardeePlayers","i","new_awardeeIndex","new_awardee","batch_prev_awardees","splice","new_tcOptions","updateLocalStorage","handleClear","mode","handleReduceMode","reduceNum","flag","allState","localStorage","removeItem","setItem","react_antd_lottery","getItem","undefined","handleExport","export_json","result_item","award","exportExcel","arr","LeftPart","className","value","style","width","disabled","onChange","title","checkedChildren","unCheckedChildren","checked","onClick","borderRadius","icon","display","placeItems","placement","marginRight","size","type","downloadTemplate","RightPart","currentPageData","columns","dataIndex","dataSource","rowKey","record","pagination","scroll","y","BodyPart","id","height","document","documentElement","clientHeight","clientWidth","href","target","color","background","backgroundSize","backgroundRepeat","gridTemplate","gridColumn","tcOptions_settingModal","total","used","textAlign","fontSize","wrap","placeContent","TabPane","Tabs","SettingModal","activePane","setActivePane","upLoadStatus","setUpLoadStatus","awardColumns","render","text","e","updateInputValue","danger","palyerColumns","statename","rowindex","repeat_flag","exist_comb","Array","from","Set","message","warning","paddingTop","visible","onCancel","footer","activeKey","tabBarExtraContent","newkey","moment","valueOf","concat","addRow","tab","accept","e_target","persist","importExcel","then","addMembers","usercode_arr","prev_member","exist_comb_record","new_exist_comb_record","new_comb","catch","console","log","PageMainRouter","exact","to","path","component","HomePage","App","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","error","Promise","resolve","wb","files","firstfile","reader","FileReader","onload","XLSX","read","josonarray","utils","sheet_to_json","Sheets","SheetNames","readAsBinaryString","SheetNames_array","keys","json_to_sheet","Props","write","bookType","compression","buffer","ArrayBuffer","view","Uint8Array","charCodeAt","createElement","download","blob","Blob","URL","createObjectURL","body","appendChild","click","removeChild"],"mappings":"20EAaQA,OAAWC,oCAAXD,OAsBFE,aAAe,SAACC,EAAUC,GAG5B,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,GAI1C,+BAACM,OAAgB,IAAD,UACOC,oDAAS,CACvCC,WAAW,EACXC,cAAc,IAHS,uMACpBC,UADoB,cACTC,aADS,yBAMaJ,oDAAS,CAC7CK,OAAQ,CACJ,CAAEC,WAAY,qBAAOC,UAAW,eAAMC,SAAU,EAAGC,IAAK,KACxD,CAAEH,WAAY,qBAAOC,UAAW,eAAMC,SAAU,EAAGC,IAAK,MAE5DC,gBAAiB,IACjBC,iBAAkB,IAZK,wMAMpBC,aANoB,cAMNC,gBANM,yBAeeb,oDAAS,CAI/Cc,eAAgB,GAEhBC,QAAS,CAAC,CAAEC,SAAU,KAAMC,SAAU,qBAAOR,IAAK,KAClD,CAAEO,SAAU,KAAMC,SAAU,qBAAOR,IAAK,MAGxCS,eAAgB,KAzBO,wMAepBC,cAfoB,cAeLC,iBAfK,yBA+BepB,oDAAS,CAC/CqB,YAAY,EACZC,eAAe,EACfC,qBAAsB,EACtBC,OAAQ,KAnCe,wMA+BpBC,cA/BoB,cA+BLC,iBA/BK,cAuC3BC,sDAAU,WACN,GAAIC,yBAEG,CACHR,iBAAiBS,OAAOC,OAAO,GAAIX,cAAe,CAAED,eAAgBC,cAAcJ,WAClF,IAAIgB,EAASC,aAAapB,cAAc,GACxCc,iBAAiBG,OAAOC,OAAO,GAAIL,cAAe,CAAEF,qBAAsBQ,KAC1EE,yBAGJC,WACD,IAEHP,sDAAU,WAMFxB,UAAUF,UACViC,OAAO,uEAGPA,WAGL,CAAC/B,UAAUF,UAAWkB,cAAehB,UAAUD,aAAcU,aAAca,gBAG9E,IAAMS,OAAS,SAATA,OAAUC,KACZC,KAAK,0aAAD,OAeGD,KAAM,GAfT,4IAsBFE,YAAc,SAACC,GACF,UAAXA,EAEAlC,aAAayB,OAAOC,OAAO,GAAI3B,UAAW,CAAEF,WAAW,KACrC,SAAXqC,GAEPlC,aAAayB,OAAOC,OAAO,GAAI3B,UAAW,CAAEF,WAAW,MAKzDsC,mBAAqB,SAACD,GACxBlC,aAAayB,OAAOC,OAAO,GAAI3B,UAAW,CAAED,aAAcoC,MAGxDE,cAAgB,SAACC,EAAuBC,EAAwBC,GAElEF,EAAiBpC,OAASoC,EAAiBpC,OAAOuC,QAAO,SAACC,GACtD,SAAKA,EAAKvC,YAAeuC,EAAKtC,WAAcsC,EAAKrC,aAErDkC,EAAkB3B,QAAU2B,EAAkB3B,QAAQ6B,QAAO,SAACC,GAC1D,SAAKA,EAAK7B,WAAa6B,EAAK5B,aAQhC,IAoDkC,EApD5B6B,EAAc3B,cAAcJ,QAC5BgC,EAAaL,EAAkB3B,QAC/BiC,EAAapC,aAAaP,OAC1B4C,EAAYR,EAAiBpC,OAG/B6C,EAAoBC,gEAAiBL,EAAaC,EAAYK,wDAC9DC,EAA4BC,8DAAeR,EAAaI,EAAmBE,wDAC3EG,EAAwBD,8DAAeP,EAAYG,EAAmBE,wDAEpEI,EAAiCH,EAA0BI,KAAI,SAACZ,GAAD,OAAeA,EAAKpC,OACnFiD,EAA6BH,EAAsBE,KAAI,SAACZ,GAAD,OAAeA,EAAKpC,OAC7EkD,EAAoBJ,EAAsBX,QAAO,SAACC,GAAD,OAAeW,EAA+BI,QAAQf,EAAKpC,MAAQ,KACpHoD,EAAqBR,EAA0BT,QAAO,SAACC,GAAD,OAAea,EAA2BE,QAAQf,EAAKpC,MAAQ,KAMrHqD,GAJcR,8DAAeC,EAAuBI,EAAmBP,wDACtDE,8DAAeD,EAA2BQ,EAAoBT,wDAG5DD,gEAAiBH,EAAYC,EAAWG,yDAC3DW,EAA2BT,8DAAeN,EAAYc,EAAkBV,wDACxEY,EAAuBV,8DAAeL,EAAWa,EAAkBV,wDAGjEa,EAAgCF,EAAyBN,KAAI,SAACZ,GAAD,OAAeA,EAAKpC,OACjFyD,EAA4BF,EAAqBP,KAAI,SAACZ,GAAD,OAAeA,EAAKpC,OAC3E0D,EAAmBH,EAAqBpB,QAAO,SAACC,GAAD,OAAeoB,EAA8BL,QAAQf,EAAKpC,MAAQ,KACjH2D,EAAoBL,EAAyBnB,QAAO,SAACC,GAAD,OAAeqB,EAA0BN,QAAQf,EAAKpC,MAAQ,KAOlH4D,GALaf,8DAAeU,EAAsBG,EAAkBf,wDACpDE,8DAAeS,EAA0BK,EAAmBhB,wDAIjCK,KAAI,SAACZ,GAAD,OAAeA,EAAKpC,QAEnE6D,EAAoBC,KAAKC,MAAMD,KAAKE,UAAUhD,gBAM9CiD,EAA6B,IACjCJ,EAAkB9C,OAAOiC,KAAI,SAACZ,EAAW8B,GACc,IAAD,EAA9CN,EAAiBT,QAAQf,EAAK+B,WAAa,KAE3C,EAAAF,GAAsBG,KAAtB,2LAA8BhC,EAAKiC,oBAC5BR,EAAkB9C,OAAOmD,OAGxCL,EAAkB9C,OAAS8C,EAAkB9C,OAAOoB,QAAO,SAACC,GAAD,OAAeA,KAC1E6B,EAAwBK,wDAASL,EAAuBtB,wDACpDkB,EAAkBjD,cAClB,EAAAqB,EAAkBxB,gBAAe2D,KAAjC,2LAAyCH,IAI7C,GAAyB,IADTjC,EAAiBpC,OAAOuC,QAAO,SAACC,GAAD,OAAeA,EAAKpC,MAAQgC,EAAiB/B,mBAC9EsE,OAAc,CACxB,IAAIC,EAAmBxC,EAAiBpC,OAAO6E,OAAO,GAAG,GACzDzC,EAAiB/B,gBAAkBuE,EAAiBxE,IACpDiC,EAAkB5B,eAAiB,GAEnCwD,EAAkB/C,qBAAuB0D,EAAiBzE,SAG9D,IAAM2E,EAAkBpC,EAAWU,KAAI,SAACZ,GAAD,OAAeA,EAAKpC,OAC3DiC,EAAkB5B,eAAiB4B,EAAkB5B,eAAe8B,QAAO,SAACC,GAAD,OAAesC,EAAgBvB,QAAQf,EAAKpC,MAAQ,KAC/H6D,EAAkB9C,OAAS8C,EAAkB9C,OAAOiC,KAAI,SAACZ,GAErD,OADAA,EAAKiC,WAAajC,EAAKiC,WAAWlC,QAAO,SAACC,GAAD,OAAesC,EAAgBvB,QAAQf,EAAKpC,MAAQ,KACtFoC,KAGPF,IACAD,EAAkB5B,eAAiB,GACnCwD,EAAkB9C,OAAS,GAC3BkB,EAAkBxB,eAAiBwB,EAAkB3B,SAOzD,IAAIJ,EAAmB,EACnByE,EAAgCd,EAAkB9C,OAAOoB,QAAO,SAACC,GAAD,OAAmB,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAM+B,YAAanC,EAAiB/B,mBAEnH2E,EAAYD,EAAgBJ,OAASI,EAAgB,GAAGN,WAAWE,OAAS,EAEhFvC,EAAiBpC,OAAOoD,KAAI,SAACZ,GACzB,GAAIA,EAAKpC,MAAQgC,EAAiB/B,gBAAiB,CAC/C,IAAI4E,EAAcC,OAAO1C,EAAKrC,UAE9BG,EAAmB2E,EAAcD,MAGzC5C,EAAiB9B,iBAAmBA,EAEpC4B,oBAAmB,GACnB1B,gBAAgB4B,GAChBrB,iBAAiBsB,GACjBhB,iBAAiB4C,IAGfkB,kBAAoB,SAACC,GAMvB,IAAI/E,EAAsB+B,EAM1B,GARArB,iBAAiBS,OAAOC,OAAO,GAAIX,cAAe,CAAEL,eAAgB,MAQxD,SAAR2E,EAAgB,CAChB,IAAIC,GAAY,EACZC,EAAO/E,aAAaP,OAOxB,GANAsF,EAAKlC,KAAI,SAACZ,EAAW8B,GACb9B,EAAKpC,MAAQG,aAAaF,kBAC1BgF,EAAWf,EAAQ,QAIvBe,GAAY,GAAKA,GAAYC,EAAKX,OAAS,GAI3C,OAFAtE,EAAkBiF,EAAKD,GAAUjF,SAKrCC,EAAkB+E,EAKtB,IAAI9E,EAAmB,EACnByE,EAAgC3D,cAAcD,OAAOoB,QAAO,SAACC,GAAD,OAAeA,EAAK+B,UAAYlE,KAC5F2E,EAAYD,EAAgBJ,OAASI,EAAgB,GAAGN,WAAWE,OAAS,EAChFpE,aAAaP,OAAOoD,KAAI,SAACZ,GACjBA,EAAKpC,MAAQC,IACbC,EAAmB4E,OAAO1C,EAAKrC,WAEnCG,GAAoB0E,KAExB5C,EAAmBZ,OAAOC,OAAO,GAAIlB,aAAc,CAAEF,kBAAiBC,qBAGtE,IAAIoB,EAASC,aAAaS,GAAkB,GAC5Cf,iBAAiBG,OAAOC,OAAO,GAAIL,cAAe,CAAEF,qBAAsBQ,KAE1ElB,gBAAgB4B,IAIdmD,WAAa,WAEf,IAAIrE,EAAuBE,cAAcF,qBAEnC+D,EAActD,aAAapB,cAAc,GACzCiF,EAAejF,aAAaD,iBAE9BmF,EAAavB,KAAKC,MAAMD,KAAKE,UAAUtD,cAAcJ,UACrDG,EAAiBqD,KAAKC,MAAMD,KAAKE,UAAUtD,cAAcD,iBAEzD6E,EAAoBtE,cAAcJ,WAAaH,EAAe8D,OAASc,EAAWd,OAElFgB,GAAkB,EAElBC,EAA2B1B,KAAKC,MAAMD,KAAKE,UAAUhD,cAAcD,SACnE0E,EAA8B,GAClCD,EAAWjB,QAAUiB,EAAWxC,KAAI,SAACZ,EAAW8B,GACxC9B,EAAK+B,WAAahE,aAAaF,kBAC/BsF,EAAiBrB,GAErBuB,EAAqBrB,KAArB,MAAAqB,EAAoB,mLAASrD,EAAKiC,gBAYtC,IALA,IAgEyB,IAOrBpC,EArEAyD,EAFexG,KAAKF,IAAI8B,EAAsB+D,EAAaO,EAAcE,GAIzEK,EAA4B,GACvBC,EAAI,EAAGA,EAAIF,GAAcC,EAAmBpB,OAASzD,EAAsB8E,IAAK,CAErF,IAAIC,EAAmB9G,aAAa,EAAGuG,EAAoB,GACvDQ,EAAc9E,cAAcJ,WAAaH,EAAeoF,GAAoBR,EAAWQ,GAI3F,GAAI/B,KAAKE,UAAU2B,GAAoBxC,QAAQW,KAAKE,UAAU8B,KAAiB,EAC3EJ,GAAc,MAGX,CAEH,IAAIK,EAAsBR,GAAkB,EAAIC,EAAWD,GAAX,WAA2C,GAIvFzB,KAAKE,UAAU+B,GAAqB5C,QAAQW,KAAKE,UAAU8B,KAAiB,EAE5EJ,GAAc,EAEP5B,KAAKE,UAAUyB,GAAsBtC,QAAQW,KAAKE,UAAU8B,KAAiB,EAEhF9E,cAAcJ,WAEd8E,GAAc,GAEdC,EAAmBvB,KAAK0B,KAK5BH,EAAmBvB,KAAK0B,GAExBR,IACAtE,cAAcJ,YAAcH,EAAeuF,OAAOH,EAAkB,KAwB5EN,GAAkB,EAClB,UAAAC,EAAWD,UAAX,YAA4BlB,YAAWD,KAAvC,QAA+CuB,GAE/CH,EAAWpB,KAAK,CAAED,SAAUhE,aAAaF,gBAAiBoE,WAAYsB,IAKtE3E,cAAcJ,YACdqB,EAAoBb,OAAOC,OAAO,GAAIX,cAAe,CAAED,iBAAgBJ,eAAgBsF,IACvFhF,iBAAiBsB,KAEjBA,EAAoBb,OAAOC,OAAO,GAAIX,cAAe,CAAEL,eAAgBsF,IACvEhF,iBAAiBsB,IAIrB,IAAI4B,EAAoBzC,OAAOC,OAAO,GAAIL,cAAe,CACrDH,eAAe,EACfE,OAAQyE,IAEZvE,iBAAiB4C,GAKjB,IAAI7B,EAAmBZ,OAAOC,OAAO,GAAIlB,aAAc,CAAED,iBAAkBkF,EAAeO,EAAmBpB,SAC7GnE,gBAAgB4B,GAEhB,IAAIiE,EAAgB7E,OAAOC,OAAO,GAAI3B,UAAW,CAAEF,WAAW,IAC9DG,aAAasG,GAGbC,mBAAmB,YAAa,CAC5BxG,UAAWuG,EACX9F,aAAc6B,EACdtB,cAAeuB,EACfjB,cAAe6C,KAKjBsC,YAAc,SAACC,EAAcxF,GAC/B,GAAa,QAATwF,EAAgB,CAEhBzF,iBAAiBS,OAAOC,OAAO,GAAIX,cAAe,CAAED,eAAgBC,cAAcJ,QAASD,eAAgB,MAC3G,IAAIwD,EAAoBzC,OAAOC,OAAO,GAAIL,cAAe,CACrDH,eAAe,EACfD,WAAYA,IAAc,EAC1BG,OAAQ,KAGZE,iBAAiB4C,GACjBrC,uBAAuBrB,aAAaF,gBAAiB,EAAG4D,GACxDqC,mBAAmB,cAIrBG,iBAAmB,SAACrB,GAEtBmB,YAAY,MAAOnB,IAGjBxD,uBAAyB,SAAC2C,EAAgBmC,EAAiBzC,GAC7D,IAAI5D,EAAkBkE,GAAYhE,aAAaP,OAAO,GAAGI,IACrDE,EAAmB,EACnByE,GAAiCd,GAAqB7C,eAAeD,OAAOoB,QAAO,SAACC,GAAD,OAAeA,EAAK+B,WAAalE,KACpH2E,EAAYD,EAAgBJ,OAASI,EAAgB,GAAGN,WAAWE,OAAS,EAChFpE,aAAaP,OAAOoD,KAAI,SAACZ,GACjBA,EAAKpC,MAAQC,IACbC,EAAmB4E,OAAO1C,EAAKrC,UAE3BuG,IACApG,GAAoBoG,GAExBpG,GAAoB0E,MAK5BxE,gBAAgBgB,OAAOC,OAAO,GAAIlB,aAAc,CAAED,uBAGhDgG,mBAAqB,SAACK,EAAcC,GAClCD,GAAiB,aAATA,EACRE,aAAaC,WAAW,sBAGxBD,aAAaE,QAAQ,qBAAsB7C,KAAKE,UAAUwC,KAK5DrF,kBAAoB,WACtB,IAAIyF,EAA0BH,aAAaI,QAAQ,4BAAyBC,EAC5E,QAAIF,IACAA,EAAqB9C,KAAKC,MAAM6C,GAChCjH,aAAaiH,EAAmBlH,WAChCU,gBAAgBwG,EAAmBzG,cACnCQ,iBAAiBiG,EAAmBlG,eACpCO,iBAAiB2F,EAAmB5F,gBAC7B,IAOT+F,aAAe,WACjB,IAAMhG,EAASC,cAAcD,OACvBnB,EAASO,aAAaP,OACxBoH,EAAmB,GACvBjG,EAAOiC,KAAI,SAACiE,GACR,IAAIC,EAAQtH,EAAOuC,QAAO,SAACC,GAAD,OAAeA,EAAKpC,MAAQiH,EAAY9C,YAAU,GAC5E6C,EAAYE,EAAMrH,YAAcoH,EAAY5C,cAEhD8C,2DAAYH,IAIVzF,aAAe,SAACpB,GAClB,IAAImB,EAAS,EACbnB,EAAaP,OAAOoD,KAAI,SAACZ,GACjBA,EAAKpC,MAAQG,EAAaF,kBAC1BqB,EAASwD,OAAO1C,EAAKrC,UAAY,EAAI,EAAI+E,OAAO1C,EAAKrC,cAK7D,IADA,IAAIqH,EAAgB,GACXxB,EAAItE,EAAQ8F,EAAIhD,KAAKwB,KAAOtE,EAAS,IAC9C,OAAO8F,GAILC,SAAW,kBAAM,2DAAC,4CAAD,KAEnB,iEAAIC,UAAW,gBACX,qFACA,2DAAC,oCAAD,CAAQC,MAAOpH,aAAaF,gBAAiBuH,MAAO,CAAEC,MAAO,KACrDC,SAAUhI,UAAUF,UACpBmI,SAAU,SAACJ,GAAD,OAAWxC,kBAAkBwC,KACtCpH,aAAaP,OAAOoD,KAAI,SAACZ,GAAD,OAAe,2DAACvD,OAAD,CAAQmB,IAAKoC,EAAKpC,IAAKuH,MAAOnF,EAAKpC,KACtEoC,EAAKvC,iBAKlB,qEACI,2DAAC,oCAAD,CAAS+H,MAAO,6EACZ,2DAAC,oCAAD,CAAQF,SAAUhI,UAAUF,UACxBqI,gBAAgB,iCAAQC,kBAAkB,iCAAQC,QAAS/G,cAAcJ,WACzE+G,SAAU,SAAC3C,GAAD,OAASqB,iBAAiBrB,MAH5C,gBAIW,oEAAItE,cAAcD,eAAe8D,OAAjC,YAGf,qEACM7E,UAAUF,UAQN,2DAAC,oCAAD,CAAQwI,QAAS,kBAAM7C,cACrBqC,MAAO,CAAES,aAAc,iBACvBC,KAAM,2DAAC,kDAAD,CAAqBV,MAAO,CAAEW,QAAS,cAAeC,WAAY,aAF1E,gBAPF,2DAAC,oCAAD,CAAQJ,QAAS,kBAAMpG,YAAY,UAC/B8F,SAAUnG,aAAapB,cAAc,IAAM,GAAKA,aAAaD,kBAAoB,GAA6C,IAAxCQ,cAAcD,eAAe8D,OACnHiD,MAAO,CAAES,aAAc,iBACvBC,KAAM,2DAAC,kDAAD,CAAoBV,MAAO,CAAEW,QAAS,cAAeC,WAAY,aACnEjI,aAAaD,iBAAmBqB,aAAapB,cAAc,GACvD,eAAO,gBAQvB,2DAAC,oCAAD,CAAQqH,MAAO,CAAES,aAAc,iBAC3BP,SAAUhI,UAAUF,WAAaW,aAAaF,kBAAoBE,aAAaP,OAAO6E,OAAO,GAAG,GAAGzE,IACnGgI,QAAS,kBAAMjD,kBAAkB,UAFrC,6BAGJ,qEAEI,2DAAC,oCAAD,CAAS6C,MAAO,0GAAsBS,UAAU,UAC5C,gHAEJ,2DAAC,oCAAD,CACId,MAAOvG,cAAcF,qBACrB4G,SAAUhI,UAAUF,UACpBmI,SAAU,SAACJ,GAAD,OAAWtG,iBAAiBG,OAAOC,OAAO,GAAIL,cAAe,CAAEF,qBAAsByG,OAE9FhG,aAAapB,cAAc6C,KAAI,SAACZ,GAAD,OAAe,2DAACvD,OAAD,CAAQmB,IAAKoC,EAAMmF,MAAOnF,GACpEA,QAOb,qEACI,2DAAC,oCAAD,CAAQoF,MAAO,CAAEc,YAAa,GAAKC,KAAK,QACpCb,SAAUhI,UAAUF,UACpBwI,QAAS,kBAAMlG,oBAAmB,KAFtC,gBAGA,2DAAC,oCAAD,CAAS8F,MAAO,+OAA6CS,UAAU,UACnE,2DAAC,oCAAD,CAAQb,MAAO,CAAEc,YAAa,GAAKC,KAAK,QACpCb,SAAUhI,UAAUF,UACpBwI,QAAS,kBAAM7B,YAAY,MAAOnF,cAAcJ,cAFpD,8BAKR,qEACI,2DAAC,oCAAD,CAAQ2H,KAAK,QAAQb,SAAUhI,UAAUF,WAA6C,IAAhCwB,cAAcD,OAAOwD,OACvEyD,QAAS,kBAAMjB,iBADnB,4BAEA,2DAAC,oCAAD,CAAQwB,KAAK,QAAQC,KAAM,OACvBR,QAAS,kBAAMS,+DADnB,gCAMNC,UAAY,WACd,IAAI3H,EAAqBC,cAAcD,OAAOoB,QAAO,SAACC,GAAD,OAAmB,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAM+B,YAAahE,aAAaF,mBAAiB,GACrH,OAAO,2DAAC,4CAAD,KAECe,cAAcH,eAAiBE,GAAwC,KAAxB,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQsD,WAAWE,QACxD,2DAAC,oCAAD,CACIqD,MAAO,SAACe,GAAD,MAAqB,4BAC5BC,QAAS,CACL,CACIC,UAAW,WACXjB,MAAO,eACPH,MAAO,KAEX,CACIoB,UAAW,WACXjB,MAAO,eACPH,MAAO,MAGfqB,WAAU,OAAE/H,QAAF,IAAEA,OAAF,EAAEA,EAAQsD,WACpB0E,OAAQ,SAACC,GAAD,cAAYA,QAAZ,IAAYA,OAAZ,EAAYA,EAAQhJ,KAC5BiJ,YAAY,EACZV,KAAM,QACNW,OAAQ,CAAEC,EAAG,OAEf,OAKZC,SAAW,kBAAM,sEACnB,kEAAKC,GAAG,qBACJ,qEAAQA,GAAG,WAAWC,OAAQC,SAASC,gBAAgBC,aAAe,IAAKhC,MAAO8B,SAASC,gBAAgBE,YAAc,IAAM,KAC3H,qJAEA,qEAEQhJ,cAAcD,eAAe8D,OAAS,IAClC7D,cAAcD,eAAegE,MAAM,EAAG,KAAKzB,KAAI,SAACZ,EAAW8B,GAAZ,OAAsB,iEAAIlE,IAAKoC,EAAK7B,UAC/E,gEAAGoJ,KAAK,IAAIC,OAAO,SAASpC,MAAO,CAAEqC,MAAO,SAAWzH,EAAK5B,cAGhEE,cAAcD,eAAeuC,KAAI,SAACZ,EAAW8B,GAAZ,OAAsB,iEAAIlE,IAAKoC,EAAK7B,UACjE,gEAAGoJ,KAAK,IAAIC,OAAO,SAASpC,MAAO,CAAEqC,MAAO,SAAWzH,EAAK5B,mBAUxF,OAAO,kEAAKgH,MAAO,CACfsC,WAAW,gBAAkBC,eAAgB,QAC7CC,iBAAkB,cAGlB,kEAAKxC,MAAO,CACRW,QAAS,OACT8B,aAAc,6BAEd,kEAAKzC,MAAO,CAAE0C,WAAY,MAAOL,MAAO,OAAQ1B,QAAS,OAAQC,WAAY,WACzE,2DAACf,SAAD,OAEJ,kEAAKG,MAAO,CAAE0C,WAAY,MAAOZ,OAAQ,QAASO,MAAO,SAErD,2DAACT,SAAD,OAEJ,kEAAK5B,MAAO,CAAE0C,WAAY,MAAOL,MAAO,OAAQ1B,QAAS,OAAQC,WAAY,eACzE,2DAACM,UAAD,OAEJ,kEAAKlB,MAAO,CAAE0C,WAAY,MAAOZ,OAAQ,MAAOO,MAAO,OAAQ1B,QAAS,OAAQC,WAAY,aAgB/F1I,UAAUD,aACP,2DAAC,wDAAD,CACI0K,uBAAwBzK,UAAUD,aAClCU,aAAcA,aACdO,cAAeA,cACfoB,mBAAoBA,mBACpBC,cAAeA,gBAEjB,KAGL5B,aAAaP,OAAOoD,KAAI,SAACZ,GACtB,GAAIA,EAAKpC,MAAQG,aAAaF,gBAAiB,CAC3C,IAAMmK,EAAQ7I,aAAapB,cAAc,GACnCkK,EAAOD,EAAQjK,aAAaD,iBAClC,OAAO,kEAAKF,IAAI,IAAIsH,UAAU,aAC1B,oEAAIlF,EAAKvC,WAAT,SAAsBuC,EAAKtC,UAA3B,SAAuCuK,EAAvC,IAA8CD,EAA9C,UACyC,IAAxC1J,cAAcL,eAAekE,OAC1B,kEAAKiD,MAAO,CACRqC,MAAO,SACPpC,MAAO,OACP6C,UAAW,SACXC,SAAU,SAJd,yCAKmB,KAIvB,2DAAC,oCAAD,CAAOhC,KAAM,CAAC,EAAG,IAAKiC,MAAI,EAAChD,MAAO,CAC9BC,MAAO,MACPgD,aAAc,WAEb/J,cAAcL,eAAe2C,KAAI,SAACZ,EAAW8B,GAAZ,OAC9B,2DAAC,oCAAD,CAAQlE,IAAKkE,EAAOqE,KAAM,SAAUnG,EAAK5B,sB,6JC1tB7DkK,EAAYC,IAAZD,QA6ROE,IAlRM,SAACtL,GAAgB,IAAD,EAEOC,mBAASD,EAAMa,cAFtB,mBAE1BA,EAF0B,KAEZC,EAFY,OAGSb,mBAASD,EAAMoB,eAHxB,mBAG1BA,EAH0B,KAGXC,EAHW,OAIGpB,mBAAS,KAJZ,mBAI1BsL,EAJ0B,KAIdC,EAJc,OAKOvL,mBAAS,KALhB,mBAK1BwL,EAL0B,KAKZC,EALY,KAO3BC,EAAoB,CACtB,CACIpC,UAAW,aACXjB,MAAO,2BACPsD,OAAQ,SAACC,EAAWnC,EAAa9E,GAAzB,OAAwC,kBAAC,IAAD,CAAOqD,MAAO4D,EAC1DxD,SAAU,SAACyD,GAAD,OAAOC,EAAiB,eAAgB,aAAcnH,EAAOkH,EAAExB,OAAOrC,YAGxF,CACIsB,UAAW,YACXjB,MAAO,2BACPsD,OAAQ,SAACC,EAAWnC,EAAa9E,GAAzB,OAAwC,kBAAC,IAAD,CAAOqD,MAAO4D,EAC1DxD,SAAU,SAACyD,GAAD,OAAOC,EAAiB,eAAgB,YAAanH,EAAOkH,EAAExB,OAAOrC,YAEvF,CACIsB,UAAW,WACXjB,MAAO,2BACPsD,OAAQ,SAACC,EAAWnC,EAAa9E,GAAzB,OAAwC,kBAAC,IAAD,CAAaqD,MAAO4D,EAChEnM,IAAK,EACL2I,SAAU,SAACJ,GAAD,OAAW8D,EAAiB,eAAgB,WAAYnH,EAAOqD,QAEjF,CACIsB,UAAW,eACXjB,MAAO,eACPsD,OAAQ,SAACC,EAAWnC,EAAa9E,GAAzB,OAAwC,kBAAC,IAAD,CAAQsE,KAAK,UAAU8C,QAAM,EACzEtD,QAAS,kBAAM5H,EAAgBgB,OAAOC,OAAO,GAAIlB,EAAc,CAC3DP,OAAQO,EAAaP,OAAOuC,QAAO,SAACC,GAAD,OAAeA,EAAKpC,MAAQgJ,EAAOhJ,YAF9B,mBAQlDuL,EAAqB,CACvB,CACI1C,UAAW,WACXjB,MAAO,eACPsD,OAAQ,SAACC,EAAWnC,EAAa9E,GAAzB,OAAwC,kBAAC,IAAD,CAAOqD,MAAO4D,EAC1DxD,SAAU,SAACyD,GAAD,OAAOC,EAAiB,gBAAiB,WAAYnH,EAAOkH,EAAExB,OAAOrC,YAEvF,CACIsB,UAAW,WACXjB,MAAO,eACPsD,OAAQ,SAACC,EAAWnC,EAAa9E,GAAzB,OAAwC,kBAAC,IAAD,CAAOqD,MAAOyB,EAAOxI,SACjEmH,SAAU,SAACyD,GAAD,OAAOC,EAAiB,gBAAiB,WAAYnH,EAAOkH,EAAExB,OAAOrC,YAEvF,CACIsB,UAAW,eACXjB,MAAO,eACPsD,OAAQ,SAACC,EAAWnC,EAAa9E,GAAzB,OAAwC,kBAAC,IAAD,CAAQsE,KAAK,UAAU8C,QAAM,EACzEtD,QAAS,kBAAMrH,EAAiBS,OAAOC,OAAO,GAAIX,EAAe,CAC7DJ,QAASI,EAAcJ,QAAQ6B,QAAO,SAACC,GAAD,OAAeA,EAAKpC,MAAQgJ,EAAOhJ,YAFjC,mBASlDqL,EAAmB,SAACG,EAAgB3C,EAAgB4C,EAAelE,GACrE,GAAkB,kBAAdiE,EAA+B,CAC/B,IAAIvJ,EAAoB6B,KAAKC,MAAMD,KAAKE,UAAUtD,IAClDuB,EAAkB3B,QAAQmL,GAAU5C,GAAatB,EAEjD,IAAImE,GAAc,EAClB,GAAkB,aAAd7C,GAA0C,aAAdA,EAA0B,CACtD,IAAI8C,EAAkB,GACtB1J,EAAkB3B,QAAQ0C,KAAI,SAACZ,GAC3BuJ,EAAWvH,KAAKhC,EAAK7B,SAAW,IAAM6B,EAAK5B,aAE/CkL,EAAc5H,KAAKE,UAAU4H,MAAMC,KAAK,IAAIC,IAAIH,OAAkB7H,KAAKE,UAAU2H,GAGjFD,EACAK,IAAQC,QAAQ,sHAAwB,GAIxCrL,EAAiBsB,QAElB,GAAkB,iBAAduJ,EAA8B,CACrC,IAAIxJ,EAAmB8B,KAAKC,MAAMD,KAAKE,UAAU7D,IACjD6B,EAAiBpC,OAAO6L,GAAU5C,GAAatB,EAE7B,aAAdsB,IACAtB,EAAQrI,KAAKE,MAAMmI,IAGvB,IAAImE,GAAc,EAClB,GAAkB,eAAd7C,GAA4C,cAAdA,EAA2B,CACzD,IAAI8C,EAAkB,GACtB3J,EAAiBpC,OAAOoD,KAAI,SAACZ,GACzBuJ,EAAWvH,KAAKhC,EAAKvC,WAAa,IAAMuC,EAAKtC,cAGjD4L,EAAc5H,KAAKE,UAAU4H,MAAMC,KAAK,IAAIC,IAAIH,OAAkB7H,KAAKE,UAAU2H,GAEjFD,EAEAK,IAAQC,QAAQ,8IAA4B,GAG5C5L,EAAgB4B,KA+F5B,OAAO,kBAAC,IAAD,CAAO4F,MAAM,2BAAOJ,MAAO,CAAEyE,WAAY,GAC5CC,QAAS5M,EAAM6K,uBACfgC,SAAU,kBAAM7M,EAAMwC,oBAAmB,IACzCsK,OAAQ,CACJ,kBAAC,IAAD,CAAQpM,IAAI,IAAIgI,QAAS,kBAAM1I,EAAMwC,oBAAmB,KAAxD,gBAGA,kBAAC,IAAD,CAAQ9B,IAAI,IAAIsL,QAAM,EAACtD,QAAS,WACO,IAA/B7H,EAAaP,OAAO2E,OACpBwH,IAAQC,QAAQ,wCAEhB1M,EAAMyC,cAAc5B,EAAcO,GAAe,KAJzD,kCASA,kBAAC,IAAD,CAAQV,IAAI,IAAIwI,KAAK,UAAUR,QAAS,WACD,IAA/B7H,EAAaP,OAAO2E,OACpBwH,IAAQC,QAAQ,wCAEhB1M,EAAMyC,cAAc5B,EAAcO,GAAe,KAJzD,oCAWJ,kBAAC,IAAD,CAAM2L,UAAWxB,EAAYlD,SAAU,SAAC0E,GAAD,OAAevB,EAAcuB,IAChEC,mBAAoB,CAChB,kBAAC,IAAD,CAAQtE,QAAS,kBAvHd,SAAC6C,GACZ,GAAmB,MAAfA,EAAoB,CACpB,IAAI3F,EAAO/E,EAAaP,OACpB2M,EAASrH,EAAKX,OAAL,UAAiBO,OAAOI,EAAKA,EAAKX,OAAS,GAAGvE,KAAO,GAArD,UAA8DwM,MAASC,WACpFrM,EAAgBgB,OAAOC,OAAO,GAAIlB,EAAc,CAC5CP,OAAQO,EAAaP,OAAO8M,OAAO,CAAE7M,WAAY,GAAIC,UAAW,GAAIC,SAAU,EAAGC,IAAKuM,YAEvF,GAAmB,MAAf1B,EAAoB,CAC3B,IAAI3F,EAAOxE,EAAcJ,QACrBiM,EAASrH,EAAKX,OAAL,UAAiBO,OAAOI,EAAKA,EAAKX,OAAS,GAAGvE,KAAO,GAArD,UAA8DwM,MAASC,WACpF9L,EAAiBS,OAAOC,OAAO,GAAIX,EAAe,CAC9CJ,QAASI,EAAcJ,QAAQoM,OAAO,CAAEnM,SAAU,GAAIC,SAAU,GAAIR,IAAKuM,QA4GlDI,CAAO9B,IAAa7K,IAAI,IAAIwH,MAAO,CAAEc,YAAa,IACrE,kBAAC,IAAD,CACId,MAAO,CAAEW,QAAS,cAAeC,WAAY,YAFrD,sBAGA,kBAAC,IAAD,CAAQpI,IAAI,IAAIsL,QAAM,EAAC9C,KAAK,UACxBR,QAAS,kBAAMrH,EAAiBS,OAAOC,OAAO,GAAIX,EAAe,CAC7DJ,QAAS,QAFjB,8BAKJ,kBAACoK,EAAD,CAASkC,IAAI,eAAK5M,IAAI,KAClB,kBAAC,IAAD,CACI4I,QAASqC,EACTnC,WAAY3I,EAAaP,OACzBmJ,OAAQ,SAACC,GAAD,OAAYA,EAAOhJ,KAC3BiJ,YAAY,KAEpB,kBAACyB,EAAD,CAASkC,IAAI,eAAK5M,IAAI,KAClB,2BACIwI,KAAK,OACLqE,OAAO,cAAcrF,MAAO,CAAEW,QAAS,eAAgBV,MAAO,QAAUE,SAAU,SAACyD,GAzHzE,IAAC0B,EA0HP1B,EAAE2B,UA1HKD,EA2HW1B,EAAExB,OAzHpCoD,YAAYF,GAAUG,MAAK,SAACC,GACxB,GAAIA,IAAU,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAY3I,QAAQ,CAElC,IAAI4I,EAAeD,EAAWlK,KAAI,SAACZ,GAAD,OAAeA,EAAK7B,YACtD,GAAIuD,KAAKE,UAAU4H,MAAMC,KAAK,IAAIC,IAAIqB,OAAoBrJ,KAAKE,UAAUmJ,GACrEpB,IAAQC,QAAQ,kDAAgB,GAChChB,EAAgB,SAEb,CACH,IAAI/I,EAAoB6B,KAAKC,MAAMD,KAAKE,UAAUtD,IAC5C0M,EAAcnL,EAAkB3B,QAClCiM,EAASa,EAAY7I,OAAZ,UAAwBO,OAAOsI,EAAY3I,OAAO,GAAG,GAAGzE,KAAO,GAAM,IAE9EqN,EAAyB,GAC7BD,EAAYpK,KAAI,SAACZ,GAEbiL,EAAkBjL,EAAK7B,SAAW,IAAM6B,EAAK5B,UAAY,KAI7D,IAAI8M,EAAwBxJ,KAAKC,MAAMD,KAAKE,UAAUqJ,IAItDH,EAAWlK,KAAI,SAACZ,GACZ,IAAImL,EAAWnL,EAAK7B,SAAW,IAAM6B,EAAK5B,SAGtC8M,EAAsBC,IAEtBD,EAAsBC,IAAa,EAEnCtL,EAAkB3B,QAAQ8D,KAAK,CAC3B7D,SAAU6B,EAAK7B,SACfC,SAAS,GAAD,OAAK4B,EAAK5B,SAAV,YAAsB8M,EAAsBlL,EAAK7B,SAAW,IAAM6B,EAAK5B,UAAvE,KACRR,IAAKuM,IAETA,EAAM,UAAMzH,OAAOyH,GAAU,KAI7Be,EAAsBC,GAAY,EAClCtL,EAAkB3B,QAAQ8D,KAAK,CAC3B7D,SAAU6B,EAAK7B,SACfC,SAAU4B,EAAK5B,SACfR,IAAKuM,IAITA,EAAM,UAAMzH,OAAOyH,GAAU,OAMrCvB,EAAgB,KAChBrK,EAAiBsB,QAQxBuL,OAAM,SAACpC,GACJJ,EAAgB,KAChByC,QAAQC,IAAI,gBACZD,QAAQC,IAAItC,MAuDJA,EAAExB,OAAOrC,MAAQ,MAEP,MAAjBwD,EACG,0BAAMvD,MAAO,CAAEqC,MAAO,UAAtB,4BACmB,MAAjBkB,EACE,0BAAMvD,MAAO,CAAEqC,MAAO,QAAtB,4BACE,KAGV,kBAAC,IAAD,CACItB,KAAK,QACLK,QAAS2C,EACTzC,WAAYpI,EAAcJ,QAC1ByI,OAAQ,SAACC,GAAD,OAAYA,EAAOhJ,KAC3BiJ,YAAY,EACZC,OAAQ,CAAEC,EAAG,Y,gQCvQlBwE,EAdQ,SAACrO,GAAD,OAAgB,kBAAC,WAAD,KACnC,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUsO,OAAK,EAAC/B,KAAK,IAAIgC,GAAG,UAC5B,kBAAC,IAAD,CAAOD,OAAK,EAACE,KAAK,QAAQC,UAAWC,U,OCDlCC,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASrD,OAIP,kBAAC,EAAD,MACA3B,SAASiF,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLrB,QAAQqB,MAAMA,EAAM/C,a,gCEhJ5B,2HAEaiB,EAAc,SAACF,GAAD,OAAmB,IAAIiC,SAAQ,SAACC,GACvD,IAAIC,EAGCnC,EAASoC,OACVF,GAAQ,GAEZ,IAAMG,EAAYrC,EAASoC,MAAM,GAG3BE,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAUlE,GACtB,IAAMlG,EAAOkG,EAAExB,OAAO7I,OAEtBkO,EAAKM,IAAKC,KAAKtK,EAAM,CAAEsD,KAAM,WAM7B,IAAIiH,EAAaF,IAAKG,MAAMC,cAAcV,EAAGW,OAAOX,EAAGY,WAAW,KAG9DJ,GAGAA,EAAaA,EAAWzM,KAAI,SAACZ,GACzB,GAAIA,EAAK,iBAASA,EAAK,gBAEnB,MAAO,CAAE7B,SAAU6B,EAAK,gBAAO5B,SAAU4B,EAAK,oBAKtD4M,EAAQS,IAERT,GAAQ,IAIhBI,EAAOU,mBAAmBX,OAQjBhI,EAAc,SAACH,GAKxB,IAAI+I,EAAwB,GAC5B3O,OAAO4O,KAAKhJ,GAAahE,KAAI,SAACnD,GAC1BkQ,EAAiB3L,KAAKvE,GACtBmH,EAAYnH,GAAcmH,EAAYnH,GAAYmD,KAAI,SAACZ,GAAD,MAAgB,CAAE,eAAMA,EAAK7B,SAAU,eAAM6B,EAAK5B,aACxGwG,EAAYnH,GAAc0P,IAAKG,MAAMO,cAAcjJ,EAAYnH,OAanE,IAXA,IAAMoP,EAAK,CAAEY,WAAYE,EAAkBH,OAAQ5I,EAAakJ,MAAO,IAGjExO,EAAM6N,IAAKY,MAAMlB,EAAI,CACvBmB,SAAU,OACV5H,KAAM,SACN6H,aAAa,IAGXC,EAAS,IAAIC,YAAY7O,EAAI6C,QAC/BiM,EAAO,IAAIC,WAAWH,GACjB1K,EAAI,EAAGA,GAAKlE,EAAI6C,SAAUqB,EAAG4K,EAAK5K,GAAyB,IAApBlE,EAAIgP,WAAW9K,GAE/D,IAAMwF,EAAI7B,SAASoH,cAAc,KACjCvF,EAAEwF,SAAW,gCACbxF,EAAE5D,MAAMW,QAAU,OAElB,IAAI0I,EAAO,IAAIC,KAAK,CAACR,GAAS,CAAE9H,KAAM,6BACtC4C,EAAEzB,KAAOoH,IAAIC,gBAAgBH,GAE7BtH,SAAS0H,KAAKC,YAAY9F,GAE1BA,EAAE+F,QAEF5H,SAAS0H,KAAKG,YAAYhG,IAGjB3C,EAAmB,WAkB5B,IAfA,IAAMwG,EAAK,CACPY,WAAY,CAAC,4BAASD,OAAQ,CAC1B,2BAAQL,IAAKG,MAAMO,cAAc,CAAC,CAAE,eAAM,GAAI,eAAM,OACrDC,MAAO,IAIRxO,EAAM6N,IAAKY,MAAMlB,EAAI,CACvBmB,SAAU,OACV5H,KAAM,SACN6H,aAAa,IAGXC,EAAS,IAAIC,YAAY7O,EAAI6C,QAC/BiM,EAAO,IAAIC,WAAWH,GACjB1K,EAAI,EAAGA,GAAKlE,EAAI6C,SAAUqB,EAAG4K,EAAK5K,GAAyB,IAApBlE,EAAIgP,WAAW9K,GAE/D,IAAMwF,EAAI7B,SAASoH,cAAc,KACjCvF,EAAEwF,SAAW,4CACbxF,EAAE5D,MAAMW,QAAU,OAElB,IAAI0I,EAAO,IAAIC,KAAK,CAACR,GAAS,CAAE9H,KAAM,6BACtC4C,EAAEzB,KAAOoH,IAAIC,gBAAgBH,GAE7BtH,SAAS0H,KAAKC,YAAY9F,GAE1BA,EAAE+F,QAEF5H,SAAS0H,KAAKG,YAAYhG,M","file":"static/js/main.94f7a7ed.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Button, Table, Switch, Select, message, Tooltip, Space } from 'antd';\r\nimport SettingModal from '@components/SettingModal';\r\nimport {\r\n    PlayCircleOutlined, PauseCircleOutlined\r\n} from '@ant-design/icons';\r\nimport { exportExcel, downloadTemplate } from \"@utils/handleExcel\"\r\nimport differenceWith from 'lodash/differenceWith';\r\nimport intersectionWith from 'lodash/intersectionWith';\r\nimport uniqWith from 'lodash/uniqWith';\r\nimport isEqual from 'lodash/isEqual';\r\nimport \"./index.less\"\r\nimport { result } from 'lodash';\r\nconst { Option } = Select;\r\n\r\ninterface AwardOptionType {\r\n    awards: object[],\r\n    currentAwardKey: string | number,\r\n    currentAwardLeft: string | number\r\n}\r\n\r\ninterface ResultType {\r\n    awardKey: string | number,\r\n    awardeeArr: AwardType[],\r\n}\r\n\r\ninterface AwardType {\r\n    awardlevel: string,\r\n    awardname: string,\r\n    awardnum: string | number,\r\n    key: string | number\r\n}\r\n\r\n\r\n\r\nconst getRandomInt = (min: any, max: any) => { //本函数在min和max之间取一个整数随机数(包头包尾)\r\n    min = Math.ceil(min);//Math.ceil() 函数返回大于或等于一个给定数字的最小整数\r\n    max = Math.floor(max);//Math.floor() 返回小于或等于一个给定数字的最大整数\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n\r\nexport default (props: any) => {\r\n    const [tcOptions, setTCOptions] = useState({\r\n        tcRunning: false,\r\n        settingModal: false\r\n    });//是否在旋转\r\n    //tagcanvas的参数\r\n    const [awardOptions, setAwardOptions] = useState({\r\n        awards: [\r\n            { awardlevel: \"一等奖\", awardname: \"摩托\", awardnum: 1, key: \"1\" },\r\n            { awardlevel: \"二等奖\", awardname: \"单车\", awardnum: 2, key: \"2\" }\r\n        ],//localStorage的awards所有奖项数组\r\n        currentAwardKey: \"1\",//当前奖项在localStorage的awards所有奖项数组中的key\r\n        currentAwardLeft: 0,//当前奖项剩余数量\r\n    });//抽奖的设置参数-奖\r\n\r\n    const [memberOptions, setMemberOptions] = useState({\r\n        // players: [],//剩余总人数 ->分组后的剩余参与人员\r\n\r\n        // currentPlayersIndex: 1,//当前所在批次(下标+1) 【考虑废弃】\r\n        awardeePlayers: [],//本轮中奖名单\r\n\r\n        members: [{ usercode: \"01\", username: \"测试甲\", key: \"1\" },\r\n        { usercode: \"02\", username: \"测试乙\", key: \"2\" }],//总人数\r\n\r\n        // batchNumber: 10,//每轮人数原本分批，现在【设置一次后】固定不变了 【考虑废弃】\r\n        currentplayers: [],//当前总人数\r\n\r\n        //leftplayersNumber: 10//剩余参与人数 【废弃】\r\n\r\n    })//抽奖的设置参数-人\r\n\r\n    const [lotterOptions, setLotterOptions] = useState({\r\n        reducemode: true,//剔除中奖人模式\r\n        shownowresult: false,//开关展示当前奖项已经出来的结果\r\n        active_resultsNumber: 0,//指定抽中奖人数 --初值等于最大奖品数\r\n        result: [],//中奖结果 [awardKey,awardeeArr]\r\n\r\n    })//抽奖的设置参数-配置\r\n\r\n    useEffect(() => {\r\n        if (queryLocalStorage()) {\r\n\r\n        } else {\r\n            setMemberOptions(Object.assign({}, memberOptions, { currentplayers: memberOptions.members }))\r\n            let maxNum = createOption(awardOptions)[0];\r\n            setLotterOptions(Object.assign({}, lotterOptions, { active_resultsNumber: maxNum }))\r\n            updateCurrentAwardLeft()\r\n        }\r\n\r\n        initTC()\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        // eval(\r\n        //     `TagCanvas.Reload('myCanvas');\r\n        //     `\r\n        // );\r\n        if (tcOptions.tcRunning) {\r\n            initTC(\"TagCanvas.SetSpeed('myCanvas', [5, 1]);TagCanvas.Reload('myCanvas')\")\r\n        } else {\r\n\r\n            initTC()\r\n        }\r\n\r\n    }, [tcOptions.tcRunning, memberOptions, tcOptions.settingModal, awardOptions, lotterOptions])\r\n\r\n    //方法区\r\n    const initTC = (str?: string) => {\r\n        eval(\r\n            `try {\r\n             TagCanvas.Start(\r\n               'myCanvas',\r\n               '',\r\n               {textColour: null,\r\n                dragControl: 1,\r\n                decel: 0.95,\r\n                textHeight: 14,\r\n                minSpeed: 0.01,\r\n                initial: [\r\n                  0.1 * Math.random() + 0.01,\r\n                  -(0.1 * Math.random() + 0.01),\r\n                ]\r\n            });\r\n            ${!str ? \"\" : str}\r\n           }\r\n           catch(e) {\r\n             document.getElementById('myCanvasContainer').style.display = 'none';\r\n           }`\r\n        );\r\n    }\r\n    const changeSpeed = (status: string) => {\r\n        if (status === \"start\") {\r\n\r\n            setTCOptions(Object.assign({}, tcOptions, { tcRunning: true }))\r\n        } else if (status === \"stop\") {\r\n\r\n            setTCOptions(Object.assign({}, tcOptions, { tcRunning: false }))\r\n        }\r\n\r\n    }\r\n\r\n    const handleSettingModal = (status: boolean) => {\r\n        setTCOptions(Object.assign({}, tcOptions, { settingModal: status }))\r\n    }\r\n\r\n    const backFromChild = (new_awardOptions: any, new_memberOptions: any, resetFlag: boolean) => {\r\n        //剔除某项为空的数据\r\n        new_awardOptions.awards = new_awardOptions.awards.filter((item: any) => {\r\n            if (!item.awardlevel || !item.awardname || !item.awardnum) return false; else return true;\r\n        })\r\n        new_memberOptions.members = new_memberOptions.members.filter((item: any) => {\r\n            if (!item.usercode || !item.username) return false; else return true;\r\n        })\r\n\r\n\r\n\r\n\r\n\r\n\r\n        const prevMembers = memberOptions.members;\r\n        const newMembers = new_memberOptions.members\r\n        const prevAwards = awardOptions.awards\r\n        const newAwards = new_awardOptions.awards\r\n\r\n        //人员\r\n        let invariant_members = intersectionWith(prevMembers, newMembers, isEqual);//【不变】\r\n        let delete_prevmodify_members = differenceWith(prevMembers, invariant_members, isEqual);//【删除和修改(旧)】\r\n        let add_newmodify_members = differenceWith(newMembers, invariant_members, isEqual);//【新增和修改(新)】\r\n\r\n        const delete_prevmodify_members_keys = delete_prevmodify_members.map((item: any) => item.key);\r\n        const add_newmodify_members_keys = add_newmodify_members.map((item: any) => item.key);\r\n        let newmodify_members = add_newmodify_members.filter((item: any) => delete_prevmodify_members_keys.indexOf(item.key) > -1);//【修改(新)】\r\n        let prevmodify_members = delete_prevmodify_members.filter((item: any) => add_newmodify_members_keys.indexOf(item.key) > -1);//【修改(旧)】\r\n\r\n        let add_members = differenceWith(add_newmodify_members, newmodify_members, isEqual);//【新增】\r\n        let delete_members = differenceWith(delete_prevmodify_members, prevmodify_members, isEqual);//【删除】\r\n\r\n        //奖品\r\n        let invariant_awards = intersectionWith(prevAwards, newAwards, isEqual);//【不变】\r\n        let delete_prevmodify_awards = differenceWith(prevAwards, invariant_awards, isEqual);//【删除和修改(旧)】\r\n        let add_newmodify_awards = differenceWith(newAwards, invariant_awards, isEqual);//【新增和修改(新)】\r\n\r\n\r\n        const delete_prevmodify_awards_keys = delete_prevmodify_awards.map((item: any) => item.key);\r\n        const add_newmodify_awards_keys = add_newmodify_awards.map((item: any) => item.key);\r\n        let newmodify_awards = add_newmodify_awards.filter((item: any) => delete_prevmodify_awards_keys.indexOf(item.key) > -1);//【修改(新)】\r\n        let prevmodify_awards = delete_prevmodify_awards.filter((item: any) => add_newmodify_awards_keys.indexOf(item.key) > -1);//【修改(旧)】\r\n\r\n        let add_awards = differenceWith(add_newmodify_awards, newmodify_awards, isEqual);//【新增】\r\n        let delete_awards = differenceWith(delete_prevmodify_awards, prevmodify_awards, isEqual);//【删除】\r\n\r\n\r\n\r\n        let delete_awardKeys: string[] = delete_awards.map((item: any) => item.key);\r\n\r\n        let new_lotterOptions = JSON.parse(JSON.stringify(lotterOptions));\r\n\r\n\r\n\r\n\r\n        //剔除删除的key所对应的奖\r\n        let delete_result_members: any = [];\r\n        new_lotterOptions.result.map((item: any, index: any) => {\r\n            if (delete_awardKeys.indexOf(item.awardKey) > -1) {\r\n\r\n                delete_result_members.push(...item.awardeeArr);\r\n                delete new_lotterOptions.result[index]\r\n            }\r\n        })\r\n        new_lotterOptions.result = new_lotterOptions.result.filter((item: any) => item)\r\n        delete_result_members = uniqWith(delete_result_members, isEqual);\r\n        if (new_lotterOptions.reducemode) {//如果剔除模式，塞回删除的奖项中的中奖者\r\n            new_memberOptions.currentplayers.push(...delete_result_members)\r\n        }\r\n        //如果currentAwardKey不在新的awards中，则自动取最后一位\r\n        let check_arr = new_awardOptions.awards.filter((item: any) => item.key === new_awardOptions.currentAwardKey);\r\n        if (check_arr.length === 0) {\r\n            let new_currentAward = new_awardOptions.awards.slice(-1)[0]\r\n            new_awardOptions.currentAwardKey = new_currentAward.key;\r\n            new_memberOptions.awardeePlayers = [];//清空本轮中奖者\r\n            //更新最大值\r\n            new_lotterOptions.active_resultsNumber = new_currentAward.awardnum;\r\n        }\r\n\r\n        const newMembers_keys = newMembers.map((item: any) => item.key);\r\n        new_memberOptions.awardeePlayers = new_memberOptions.awardeePlayers.filter((item: any) => newMembers_keys.indexOf(item.key) > -1);\r\n        new_lotterOptions.result = new_lotterOptions.result.map((item: any) => {\r\n            item.awardeeArr = item.awardeeArr.filter((item: any) => newMembers_keys.indexOf(item.key) > -1);//中奖者只取新旧key相同的\r\n            return item\r\n        })\r\n\r\n        if (resetFlag) {//重置\r\n            new_memberOptions.awardeePlayers = [];\r\n            new_lotterOptions.result = [];\r\n            new_memberOptions.currentplayers = new_memberOptions.members;\r\n        } else {//不重置\r\n\r\n        }\r\n\r\n\r\n        //更新剩余数量\r\n        let currentAwardLeft = 0;\r\n        let now_result_item: ResultType[] = new_lotterOptions.result.filter((item: any) => item?.awardKey === new_awardOptions.currentAwardKey);\r\n\r\n        let exist_num = now_result_item.length ? now_result_item[0].awardeeArr.length : 0;\r\n\r\n        new_awardOptions.awards.map((item: any) => {\r\n            if (item.key === new_awardOptions.currentAwardKey) {\r\n                let maxAwardNum = Number(item.awardnum);\r\n\r\n                currentAwardLeft = maxAwardNum - exist_num;\r\n            }\r\n        })\r\n        new_awardOptions.currentAwardLeft = currentAwardLeft;\r\n\r\n        handleSettingModal(false)\r\n        setAwardOptions(new_awardOptions)\r\n        setMemberOptions(new_memberOptions)\r\n        setLotterOptions(new_lotterOptions)\r\n    }\r\n\r\n    const handleChangeAward = (val: any) => {\r\n\r\n\r\n        //清空当前中奖者\r\n        setMemberOptions(Object.assign({}, memberOptions, { awardeePlayers: [] }))\r\n\r\n        let currentAwardKey: any, new_awardOptions: any;\r\n\r\n\r\n\r\n\r\n\r\n        if (val === \"next\") {\r\n            let newindex = -1;\r\n            let data = awardOptions.awards;\r\n            data.map((item: any, index: any) => {\r\n                if (item.key === awardOptions.currentAwardKey) {\r\n                    newindex = index + 1\r\n                }\r\n            })\r\n\r\n            if (newindex > -1 && newindex <= data.length - 1) {\r\n\r\n                currentAwardKey = data[newindex].key;\r\n            } else {\r\n                return\r\n            }\r\n        } else {\r\n            currentAwardKey = val;\r\n        }\r\n\r\n\r\n        //更新剩余数量【得手动写一份】\r\n        let currentAwardLeft = 0;\r\n        let now_result_item: ResultType[] = lotterOptions.result.filter((item: any) => item.awardKey == currentAwardKey);\r\n        let exist_num = now_result_item.length ? now_result_item[0].awardeeArr.length : 0;\r\n        awardOptions.awards.map((item: any) => {\r\n            if (item.key === currentAwardKey) {\r\n                currentAwardLeft = Number(item.awardnum);\r\n            }\r\n            currentAwardLeft -= exist_num;\r\n        })\r\n        new_awardOptions = Object.assign({}, awardOptions, { currentAwardKey, currentAwardLeft });\r\n\r\n        //每次切换，设置的中奖人数重置为最大值\r\n        let maxNum = createOption(new_awardOptions)[0];\r\n        setLotterOptions(Object.assign({}, lotterOptions, { active_resultsNumber: maxNum }))\r\n\r\n        setAwardOptions(new_awardOptions)\r\n\r\n\r\n    }\r\n    const handleStop = () => {\r\n\r\n        let active_resultsNumber = lotterOptions.active_resultsNumber//本轮设置的中奖人数\r\n\r\n        const maxAwardNum = createOption(awardOptions)[0];//当前奖品最大数量\r\n        const leftAwardNum = awardOptions.currentAwardLeft   //当前奖项剩余数量\r\n        let temp_leftAwardNum = leftAwardNum;\r\n        let maxMembers = JSON.parse(JSON.stringify(memberOptions.members));//总名单\r\n        let currentplayers = JSON.parse(JSON.stringify(memberOptions.currentplayers));//剩余名单\r\n\r\n        let leftplayersNumber = lotterOptions.reducemode ? currentplayers.length : maxMembers.length;//剩下的参与人数\r\n\r\n        let now_awardIndex = -1;//当前奖项key所在result中下标\r\n\r\n        let new_result: ResultType[] = JSON.parse(JSON.stringify(lotterOptions.result))\r\n        let result_prev_awardees: any[] = [];//各个奖项的已中奖者名单\r\n        new_result.length && new_result.map((item: any, index: any) => {\r\n            if (item.awardKey === awardOptions.currentAwardKey) {\r\n                now_awardIndex = index;\r\n            }\r\n            result_prev_awardees.push(...item.awardeeArr)\r\n        })\r\n\r\n\r\n\r\n\r\n        //实际获取随机数的次数\r\n        const RANDOM_NUM = Math.min(active_resultsNumber, maxAwardNum, leftAwardNum, leftplayersNumber);\r\n\r\n        let random_num = RANDOM_NUM;\r\n        // console.log(\"受控的理论真正中奖者数量:\" + RANDOM_NUM)\r\n        let new_awardeePlayers: any[] = [];//本轮中奖名单\r\n        for (let i = 0; i < random_num && new_awardeePlayers.length < active_resultsNumber; i++) {\r\n\r\n            let new_awardeeIndex = getRandomInt(0, leftplayersNumber - 1);\r\n            let new_awardee = lotterOptions.reducemode ? currentplayers[new_awardeeIndex] : maxMembers[new_awardeeIndex];\r\n            // 打印参数\r\n            // console.log(`中奖者下标=${new_awardeeIndex},中奖者名字=${new_awardee?.username},中奖者key=${new_awardee?.key},new_awardeePlayers=${JSON.stringify(new_awardeePlayers)}`)\r\n\r\n            if (JSON.stringify(new_awardeePlayers).indexOf(JSON.stringify(new_awardee)) > -1) {//如果在本轮中奖名单里重复\r\n                random_num += 1;//继续抽一次\r\n\r\n\r\n            } else {\r\n\r\n                let batch_prev_awardees = now_awardIndex > -1 ? new_result[now_awardIndex][\"awardeeArr\"] : [];//如果该奖已经抽过，则传入已经存在的中奖者\r\n\r\n                //无论是否是剔除模式，确保每轮抽奖里一个人的名字只会出现一次、同一个奖项里一个人的名字也只出现一次\r\n\r\n                if (JSON.stringify(batch_prev_awardees).indexOf(JSON.stringify(new_awardee)) > -1) {//如果已经在当前奖项的中奖者里面\r\n\r\n                    random_num += 1;//继续抽一次\r\n\r\n                } else if (JSON.stringify(result_prev_awardees).indexOf(JSON.stringify(new_awardee)) > -1) {//如果中过别的奖\r\n\r\n                    if (lotterOptions.reducemode) {//剔除模式--剔除模式下如果进了这分支就是有逻辑写错了\r\n\r\n                        random_num += 1;//继续抽一次\r\n                    } else {//非剔除模式\r\n                        new_awardeePlayers.push(new_awardee)\r\n                        temp_leftAwardNum--;\r\n\r\n                    }\r\n                } else {\r\n                    new_awardeePlayers.push(new_awardee);\r\n                    temp_leftAwardNum--;\r\n                    leftplayersNumber--;\r\n                    lotterOptions.reducemode && currentplayers.splice(new_awardeeIndex, 1)//从抽奖名单中拿掉\r\n\r\n                }\r\n\r\n\r\n\r\n                // //如果剩余奖品不为0、而且当前轮中奖数量没达到要求、并且人数还够,则继续抽一次\r\n                // if (leftAwardNum > 0 && currentplayers.length > 0) {\r\n                //     random_num += 1;\r\n                // }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        if (now_awardIndex > -1) {\r\n            new_result[now_awardIndex]?.awardeeArr.push(...new_awardeePlayers)\r\n        } else {\r\n            new_result.push({ awardKey: awardOptions.currentAwardKey, awardeeArr: new_awardeePlayers })\r\n        }\r\n\r\n\r\n        let new_memberOptions;//state1\r\n        if (lotterOptions.reducemode) {\r\n            new_memberOptions = Object.assign({}, memberOptions, { currentplayers, awardeePlayers: new_awardeePlayers })\r\n            setMemberOptions(new_memberOptions)//剔除模式就更新剩余名单\r\n        } else {\r\n            new_memberOptions = Object.assign({}, memberOptions, { awardeePlayers: new_awardeePlayers })\r\n            setMemberOptions(new_memberOptions)\r\n\r\n        }\r\n\r\n        let new_lotterOptions = Object.assign({}, lotterOptions, {\r\n            shownowresult: true,\r\n            result: new_result\r\n        })//state2\r\n        setLotterOptions(new_lotterOptions)\r\n\r\n        //确保新数据能更新到localStorage，得提前封装一份，所以改成手动再写一遍更新剩余数量\r\n        // updateCurrentAwardLeft(awardOptions.currentAwardKey, RANDOM_NUM)//更新该奖剩余数量\r\n\r\n        let new_awardOptions = Object.assign({}, awardOptions, { currentAwardLeft: leftAwardNum - new_awardeePlayers.length });//state3\r\n        setAwardOptions(new_awardOptions)\r\n\r\n        let new_tcOptions = Object.assign({}, tcOptions, { tcRunning: false });//state4\r\n        setTCOptions(new_tcOptions);//停止旋转\r\n\r\n        //更新localStorage\r\n        updateLocalStorage(\"updateAll\", {\r\n            tcOptions: new_tcOptions,\r\n            awardOptions: new_awardOptions,\r\n            memberOptions: new_memberOptions,\r\n            lotterOptions: new_lotterOptions\r\n        })\r\n\r\n    }\r\n\r\n    const handleClear = (mode: string, reducemode?: boolean) => {\r\n        if (mode === \"all\") {\r\n\r\n            setMemberOptions(Object.assign({}, memberOptions, { currentplayers: memberOptions.members, awardeePlayers: [] }));\r\n            let new_lotterOptions = Object.assign({}, lotterOptions, {\r\n                shownowresult: false,\r\n                reducemode: reducemode || false,\r\n                result: []\r\n            })\r\n\r\n            setLotterOptions(new_lotterOptions)\r\n            updateCurrentAwardLeft(awardOptions.currentAwardKey, 0, new_lotterOptions)\r\n            updateLocalStorage(\"clearAll\")\r\n        }\r\n    }\r\n\r\n    const handleReduceMode = (val: boolean) => {\r\n        // setLotterOptions(Object.assign({}, lotterOptions, { reducemode: val }))\r\n        handleClear(\"all\", val)//重置\r\n    }\r\n\r\n    const updateCurrentAwardLeft = (awardKey?: any, reduceNum?: any, new_lotterOptions?: any) => {\r\n        let currentAwardKey = awardKey || awardOptions.awards[0].key;//不传就取第一位\r\n        let currentAwardLeft = 0;\r\n        let now_result_item: ResultType[] = (new_lotterOptions || lotterOptions).result.filter((item: any) => item.awardKey === currentAwardKey);\r\n        let exist_num = now_result_item.length ? now_result_item[0].awardeeArr.length : 0;\r\n        awardOptions.awards.map((item: any) => {\r\n            if (item.key === currentAwardKey) {\r\n                currentAwardLeft = Number(item.awardnum);\r\n\r\n                if (reduceNum) {\r\n                    currentAwardLeft -= reduceNum;\r\n                }\r\n                currentAwardLeft -= exist_num;\r\n\r\n            }\r\n        })\r\n\r\n        setAwardOptions(Object.assign({}, awardOptions, { currentAwardLeft }))\r\n    }\r\n\r\n    const updateLocalStorage = (flag: string, allState?: any) => {\r\n        if (flag && flag === \"clearAll\") {\r\n            localStorage.removeItem(\"react_antd_lottery\");\r\n        } else {\r\n\r\n            localStorage.setItem(\"react_antd_lottery\", JSON.stringify(allState));\r\n        }\r\n\r\n    }\r\n\r\n    const queryLocalStorage = (): boolean => {\r\n        let react_antd_lottery: any = localStorage.getItem(\"react_antd_lottery\") || undefined;\r\n        if (react_antd_lottery) {\r\n            react_antd_lottery = JSON.parse(react_antd_lottery)\r\n            setTCOptions(react_antd_lottery.tcOptions)\r\n            setAwardOptions(react_antd_lottery.awardOptions)\r\n            setMemberOptions(react_antd_lottery.memberOptions)\r\n            setLotterOptions(react_antd_lottery.lotterOptions)\r\n            return true\r\n        } else {\r\n\r\n            return false\r\n        }\r\n    }\r\n\r\n    const handleExport = () => {\r\n        const result = lotterOptions.result;\r\n        const awards = awardOptions.awards;\r\n        let export_json: any = []\r\n        result.map((result_item: any) => {\r\n            let award = awards.filter((item: any) => item.key === result_item.awardKey)[0]\r\n            export_json[award.awardlevel] = result_item.awardeeArr;\r\n        })\r\n        exportExcel(export_json);\r\n    }\r\n\r\n    //UI组件区\r\n    const createOption = (awardOptions: AwardOptionType): number[] => {\r\n        let maxNum = 0;\r\n        awardOptions.awards.map((item: any) => {\r\n            if (item.key === awardOptions.currentAwardKey) {\r\n                maxNum = Number(item.awardnum) < 0 ? 0 : Number(item.awardnum);\r\n            }\r\n        })\r\n\r\n        let arr: number[] = [];\r\n        for (let i = maxNum; arr.push(i--) < maxNum + 1;) { }\r\n        return arr;\r\n    }\r\n\r\n\r\n    const LeftPart = () => <Fragment>\r\n\r\n        <ul className={\"operation_ul\"}>\r\n            <li>奖项:\r\n            <Select value={awardOptions.currentAwardKey} style={{ width: 120 }}\r\n                    disabled={tcOptions.tcRunning}\r\n                    onChange={(value) => handleChangeAward(value)}>\r\n                    {awardOptions.awards.map((item: any) => <Option key={item.key} value={item.key}>\r\n                        {item.awardlevel}\r\n                    </Option>\r\n                    )}\r\n                </Select>\r\n            </li>\r\n            <li>\r\n                <Tooltip title={\"注:切换剔除将重置中奖结果\"}>\r\n                    <Switch disabled={tcOptions.tcRunning}\r\n                        checkedChildren=\"剔除已中奖\" unCheckedChildren=\"保留已中奖\" checked={lotterOptions.reducemode}\r\n                        onChange={(val) => handleReduceMode(val)} />\r\n                        剩余:<b>{memberOptions.currentplayers.length}人</b>\r\n                </Tooltip>\r\n            </li>\r\n            <li>\r\n                {!tcOptions.tcRunning ?\r\n                    <Button onClick={() => changeSpeed(\"start\")}\r\n                        disabled={createOption(awardOptions)[0] <= 0 || awardOptions.currentAwardLeft <= 0 || memberOptions.currentplayers.length === 0}\r\n                        style={{ borderRadius: \"25px 0 0 25px\" }}\r\n                        icon={<PlayCircleOutlined style={{ display: \"inline-grid\", placeItems: \"center\" }} />} >{\r\n                            awardOptions.currentAwardLeft < createOption(awardOptions)[0] ?\r\n                                \"继续\" : \"开始\"\r\n                        }</Button>\r\n                    : <Button onClick={() => handleStop()}\r\n                        style={{ borderRadius: \"25px 0 0 25px\" }}\r\n                        icon={<PauseCircleOutlined style={{ display: \"inline-grid\", placeItems: \"center\" }} />}\r\n                    >停止</Button>\r\n                }\r\n\r\n                <Button style={{ borderRadius: \"0 25px 25px 0\" }}\r\n                    disabled={tcOptions.tcRunning || awardOptions.currentAwardKey === awardOptions.awards.slice(-1)[0].key}\r\n                    onClick={() => handleChangeAward(\"next\")}>下一个奖</Button></li>\r\n            <li>\r\n\r\n                <Tooltip title={\"注:可以选择的范围取决于当前奖品总数\"} placement=\"bottom\">\r\n                    <span>本轮中奖人数</span>\r\n                </Tooltip>\r\n                <Select\r\n                    value={lotterOptions.active_resultsNumber}\r\n                    disabled={tcOptions.tcRunning}\r\n                    onChange={(value) => setLotterOptions(Object.assign({}, lotterOptions, { active_resultsNumber: value }))}>\r\n\r\n                    {createOption(awardOptions).map((item: any) => <Option key={item} value={item}>\r\n                        {item}\r\n                    </Option>\r\n                    )}\r\n                </Select>\r\n\r\n                {/* <br /><span>奖池所剩<b>{awardOptions.currentAwardLeft}</b>个</span> */}\r\n            </li>\r\n            <li>\r\n                <Button style={{ marginRight: 4 }} size=\"small\"\r\n                    disabled={tcOptions.tcRunning}\r\n                    onClick={() => handleSettingModal(true)}>设置</Button>\r\n                <Tooltip title={\"注:重置会连同清空本地存储数据，刷新后会丢失，可以中奖人数设0后抽取一次来记录数据\"} placement=\"bottom\">\r\n                    <Button style={{ marginRight: 4 }} size=\"small\"\r\n                        disabled={tcOptions.tcRunning}\r\n                        onClick={() => handleClear(\"all\", lotterOptions.reducemode)}>重置所有</Button>\r\n                </Tooltip>\r\n            </li>\r\n            <li>\r\n                <Button size=\"small\" disabled={tcOptions.tcRunning || lotterOptions.result.length === 0}\r\n                    onClick={() => handleExport()}>导出全部</Button>\r\n                <Button size=\"small\" type={\"link\"}\r\n                    onClick={() => downloadTemplate()}>下载模板</Button>\r\n            </li>\r\n        </ul>\r\n    </Fragment>\r\n\r\n    const RightPart = () => {\r\n        let result: ResultType = lotterOptions.result.filter((item: any) => item?.awardKey === awardOptions.currentAwardKey)[0];\r\n        return <Fragment>\r\n            {\r\n                lotterOptions.shownowresult && result && result?.awardeeArr.length !== 0 ?\r\n                    <Table\r\n                        title={(currentPageData) => \"获奖名单\"}\r\n                        columns={[\r\n                            {\r\n                                dataIndex: 'username',\r\n                                title: '姓名',\r\n                                width: 100,\r\n                            },\r\n                            {\r\n                                dataIndex: 'usercode',\r\n                                title: '编号',\r\n                                width: 100,\r\n                            }\r\n                        ]}\r\n                        dataSource={result?.awardeeArr}\r\n                        rowKey={(record) => record?.key}\r\n                        pagination={false}// 考虑前端分页\r\n                        size={\"small\"}\r\n                        scroll={{ y: 400 }}\r\n                    ></Table>\r\n                    : null\r\n            }\r\n        </Fragment>\r\n    }\r\n\r\n    const BodyPart = () => <div>\r\n        <div id=\"myCanvasContainer\">\r\n            <canvas id=\"myCanvas\" height={document.documentElement.clientHeight - 150} width={document.documentElement.clientWidth - 200 - 250}>\r\n                <p>Anything in here will be replaced on browsers that support the canvas element</p>\r\n                {/* 超出一定数量设定截取渲染 */}\r\n                <ul>\r\n                    {\r\n                        memberOptions.currentplayers.length > 400 ?\r\n                            memberOptions.currentplayers.slice(0, 400).map((item: any, index) => <li key={item.usercode}>\r\n                                <a href=\"#\" target=\"_blank\" style={{ color: \"#fff\" }}>{item.username}</a>\r\n                            </li>)\r\n                            :\r\n                            memberOptions.currentplayers.map((item: any, index) => <li key={item.usercode}>\r\n                                <a href=\"#\" target=\"_blank\" style={{ color: \"#fff\" }}>{item.username}</a>\r\n                            </li>)}\r\n                </ul>\r\n\r\n            </canvas>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    //return区\r\n    return <div style={{\r\n        background: `url(./bg.jpg)`, backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\"\r\n    }}>\r\n        {/* 布局 */}\r\n        <div style={{\r\n            display: \"grid\",\r\n            gridTemplate: \"1fr auto / auto 1fr auto\"\r\n        }}>\r\n            <div style={{ gridColumn: \"1/2\", color: \"#fff\", display: \"grid\", placeItems: \"center\" }}>\r\n                <LeftPart />\r\n            </div>\r\n            <div style={{ gridColumn: \"2/3\", height: \"100vh\", color: \"#fff\" }}>\r\n                {/* <div style={{ gridColumn: \"2/3\", height: \"90vh\", color: \"#fff\" }}> */}\r\n                <BodyPart />\r\n            </div>\r\n            <div style={{ gridColumn: \"3/4\", color: \"#fff\", display: \"grid\", placeItems: \"end center\" }}>\r\n                <RightPart />\r\n            </div>\r\n            <div style={{ gridColumn: \"1/4\", height: \"0vh\", color: \"#fff\", display: \"grid\", placeItems: \"center\" }}>\r\n                {/* 调试用---把0vh改成有效值，同时变更BodyPart上一级div的vh */}\r\n                {/* <div style={{ gridColumn: \"1/4\", height: \"10vh\", color: \"#fff\", display: \"grid\", placeItems: \"center\" }}>\r\n\r\n                当前最大值：{createOption(awardOptions)[0]}<br />\r\n                当前剩余数量:{awardOptions.currentAwardLeft}<br />\r\n                <Button onClick={() => {\r\n                    console.log(JSON.stringify(memberOptions.currentplayers))\r\n                }}>查看剩余参与者名单</Button>\r\n\r\n                */}\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n        {tcOptions.settingModal ?\r\n            <SettingModal\r\n                tcOptions_settingModal={tcOptions.settingModal}\r\n                awardOptions={awardOptions}\r\n                memberOptions={memberOptions}\r\n                handleSettingModal={handleSettingModal}\r\n                backFromChild={backFromChild}\r\n            />\r\n            : null}\r\n\r\n\r\n        {awardOptions.awards.map((item: any) => {\r\n            if (item.key === awardOptions.currentAwardKey) {\r\n                const total = createOption(awardOptions)[0];\r\n                const used = total - awardOptions.currentAwardLeft\r\n                return <div key=\"1\" className=\"showAward\">\r\n                    <b>{item.awardlevel}：{item.awardname}（{used}/{total}）</b>\r\n                    {memberOptions.awardeePlayers.length !== 0 ?\r\n                        <div style={{\r\n                            color: \"yellow\",\r\n                            width: \"100%\",\r\n                            textAlign: \"center\",\r\n                            fontSize: \"20px\"\r\n                        }}>本轮中奖名单:</div> : null\r\n                    }\r\n\r\n                    {/* 本轮中奖名单-展示用 */}\r\n                    <Space size={[8, 16]} wrap style={{\r\n                        width: \"80%\",\r\n                        placeContent: \"center\"\r\n                    }}>\r\n                        {memberOptions.awardeePlayers.map((item: any, index) =>\r\n                            <Button key={index} size={\"large\"}>{item.username}</Button>\r\n                        )}\r\n                    </Space>\r\n                </div>\r\n            }\r\n\r\n        })}\r\n\r\n    </div>\r\n}\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Modal, Input, Tabs, Table, InputNumber, Button, message, Tooltip } from 'antd';\r\nimport {\r\n    PlusCircleOutlined\r\n} from '@ant-design/icons';\r\nimport { importExcel } from \"@utils/handleExcel\"\r\nimport moment from 'moment';\r\nconst { TabPane } = Tabs;\r\n\r\n\r\n/**\r\n * \r\n * @param props \r\n * state from father:   props.tcOptions_settingModal,\r\n * state from father & need to back:    awardOptions,memberOptions\r\n * function from father:    handleSettingModal(status),backFromChild\r\n */\r\n\r\nconst SettingModal = (props: any) => {\r\n\r\n    const [awardOptions, setAwardOptions] = useState(props.awardOptions);\r\n    const [memberOptions, setMemberOptions] = useState(props.memberOptions);\r\n    const [activePane, setActivePane] = useState(\"1\");\r\n    const [upLoadStatus, setUpLoadStatus] = useState(\"0\")\r\n\r\n    const awardColumns: any = [\r\n        {\r\n            dataIndex: 'awardlevel',\r\n            title: '奖品等级',\r\n            render: (text: any, record: any, index: any) => <Input value={text}\r\n                onChange={(e) => updateInputValue(\"awardOptions\", \"awardlevel\", index, e.target.value)} />\r\n\r\n        },\r\n        {\r\n            dataIndex: 'awardname',\r\n            title: '奖品名称',\r\n            render: (text: any, record: any, index: any) => <Input value={text}\r\n                onChange={(e) => updateInputValue(\"awardOptions\", \"awardname\", index, e.target.value)} />\r\n        },\r\n        {\r\n            dataIndex: 'awardnum',\r\n            title: '奖品数量',\r\n            render: (text: any, record: any, index: any) => <InputNumber value={text}\r\n                min={0}\r\n                onChange={(value) => updateInputValue(\"awardOptions\", \"awardnum\", index, value)} />\r\n        },\r\n        {\r\n            dataIndex: '操作',\r\n            title: '删除',\r\n            render: (text: any, record: any, index: any) => <Button type=\"primary\" danger\r\n                onClick={() => setAwardOptions(Object.assign({}, awardOptions, {\r\n                    awards: awardOptions.awards.filter((item: any) => item.key !== record.key)\r\n                }))}>\r\n                删除\r\n          </Button>\r\n        }\r\n    ]\r\n    const palyerColumns: any = [\r\n        {\r\n            dataIndex: 'usercode',\r\n            title: '编号',\r\n            render: (text: any, record: any, index: any) => <Input value={text}\r\n                onChange={(e) => updateInputValue(\"memberOptions\", \"usercode\", index, e.target.value)} />\r\n        },\r\n        {\r\n            dataIndex: 'username',\r\n            title: '姓名',\r\n            render: (text: any, record: any, index: any) => <Input value={record.username}\r\n                onChange={(e) => updateInputValue(\"memberOptions\", \"username\", index, e.target.value)} />\r\n        },\r\n        {\r\n            dataIndex: '操作',\r\n            title: '删除',\r\n            render: (text: any, record: any, index: any) => <Button type=\"primary\" danger\r\n                onClick={() => setMemberOptions(Object.assign({}, memberOptions, {\r\n                    members: memberOptions.members.filter((item: any) => item.key !== record.key)\r\n                }))}>\r\n                删除\r\n          </Button>\r\n        }\r\n    ]\r\n\r\n    const updateInputValue = (statename: any, dataIndex: any, rowindex: any, value: any) => {\r\n        if (statename === \"memberOptions\") {\r\n            let new_memberOptions = JSON.parse(JSON.stringify(memberOptions));\r\n            new_memberOptions.members[rowindex][dataIndex] = value\r\n\r\n            let repeat_flag = false;\r\n            if (dataIndex === \"usercode\" || dataIndex === \"username\") {\r\n                let exist_comb: any = [];\r\n                new_memberOptions.members.map((item: any) => {\r\n                    exist_comb.push(item.usercode + \"_\" + item.username)\r\n                })\r\n                repeat_flag = JSON.stringify(Array.from(new Set(exist_comb))) !== JSON.stringify(exist_comb)\r\n            }\r\n\r\n            if (repeat_flag) {\r\n                message.warning(\"不允许出现“编号+姓名”名称完全一致的行\", 5)\r\n            } else {\r\n\r\n\r\n                setMemberOptions(new_memberOptions)\r\n            }\r\n        } else if (statename === \"awardOptions\") {\r\n            let new_awardOptions = JSON.parse(JSON.stringify(awardOptions));\r\n            new_awardOptions.awards[rowindex][dataIndex] = value\r\n\r\n            if (dataIndex === \"awardnum\") {\r\n                value = Math.floor(value)\r\n            }\r\n\r\n            let repeat_flag = false;\r\n            if (dataIndex === \"awardlevel\" || dataIndex === \"awardname\") {\r\n                let exist_comb: any = [];\r\n                new_awardOptions.awards.map((item: any) => {\r\n                    exist_comb.push(item.awardlevel + \"_\" + item.awardname)\r\n                })\r\n\r\n                repeat_flag = JSON.stringify(Array.from(new Set(exist_comb))) !== JSON.stringify(exist_comb)\r\n            }\r\n            if (repeat_flag) {\r\n\r\n                message.warning(\"不允许出现“奖品等级+奖品名称”名称完全一致的行\", 5)\r\n            } else {\r\n\r\n                setAwardOptions(new_awardOptions)\r\n            }\r\n\r\n        }\r\n    }\r\n    const addRow = (activePane: any) => {\r\n        if (activePane === \"1\") {\r\n            let data = awardOptions.awards;\r\n            let newkey = data.length ? `${Number(data[data.length - 1].key) + 1}` : `${moment().valueOf()}`;//如果全部清空，则从时间戳开始计算key\r\n            setAwardOptions(Object.assign({}, awardOptions, {\r\n                awards: awardOptions.awards.concat({ awardlevel: \"\", awardname: \"\", awardnum: 0, key: newkey })\r\n            }))\r\n        } else if (activePane === \"2\") {\r\n            let data = memberOptions.members;\r\n            let newkey = data.length ? `${Number(data[data.length - 1].key) + 1}` : `${moment().valueOf()}`;\r\n            setMemberOptions(Object.assign({}, memberOptions, {\r\n                members: memberOptions.members.concat({ usercode: \"\", username: \"\", key: newkey })\r\n            }))\r\n        }\r\n    }\r\n\r\n    const addMemberFromFile = (e_target: any) => {\r\n        // (importExcel(e_target) as Promise<any>).then((addMembers: any) => {\r\n        importExcel(e_target).then((addMembers: any) => {\r\n            if (addMembers && addMembers?.length) {\r\n\r\n                let usercode_arr = addMembers.map((item: any) => item.usercode);\r\n                if (JSON.stringify(Array.from(new Set(usercode_arr))) !== JSON.stringify(usercode_arr)) {\r\n                    message.warning(\"excel中有重复的编号\", 5)\r\n                    setUpLoadStatus(\"2\")\r\n\r\n                } else {\r\n                    let new_memberOptions = JSON.parse(JSON.stringify(memberOptions));\r\n                    const prev_member = new_memberOptions.members\r\n                    let newkey = prev_member.length ? `${Number(prev_member.slice(-1)[0].key) + 1}` : \"1\";\r\n\r\n                    let exist_comb_record: any = {};//形如 [{'1_甲':number}]\r\n                    prev_member.map((item: any) => {\r\n\r\n                        exist_comb_record[item.usercode + \"_\" + item.username] = 1\r\n                    })\r\n\r\n\r\n                    let new_exist_comb_record = JSON.parse(JSON.stringify(exist_comb_record))\r\n                    // console.log(new_exist_comb_record)\r\n\r\n                    //下面代码除了添加每行excel新数据到旧state中，仅在若新旧数据的comb完全一致，新数据的名字后面加个(n+1)\r\n                    addMembers.map((item: any) => {\r\n                        let new_comb = item.usercode + \"_\" + item.username;\r\n\r\n\r\n                        if (new_exist_comb_record[new_comb]) {\r\n\r\n                            new_exist_comb_record[new_comb] += 1;\r\n                            //同名出现n+1次 则 改为 名字(n+1)\r\n                            new_memberOptions.members.push({\r\n                                usercode: item.usercode,\r\n                                username: `${item.username}(${new_exist_comb_record[item.usercode + \"_\" + item.username]})`,\r\n                                key: newkey\r\n                            })\r\n                            newkey = `${Number(newkey) + 1}`;\r\n                        } else {\r\n\r\n\r\n                            new_exist_comb_record[new_comb] = 1\r\n                            new_memberOptions.members.push({\r\n                                usercode: item.usercode,\r\n                                username: item.username,\r\n                                key: newkey\r\n                            })\r\n\r\n\r\n                            newkey = `${Number(newkey) + 1}`;\r\n                        }\r\n\r\n                    });\r\n\r\n\r\n                    setUpLoadStatus(\"1\")\r\n                    setMemberOptions(new_memberOptions)\r\n                }\r\n\r\n\r\n\r\n\r\n            }\r\n        })\r\n            .catch((e: any) => {\r\n                setUpLoadStatus(\"2\")\r\n                console.log(\"异常\")\r\n                console.log(e)\r\n            })\r\n\r\n    }\r\n\r\n    return <Modal title=\"抽奖设置\" style={{ paddingTop: 8 }}\r\n        visible={props.tcOptions_settingModal}\r\n        onCancel={() => props.handleSettingModal(false)}\r\n        footer={[\r\n            <Button key=\"1\" onClick={() => props.handleSettingModal(false)}>\r\n                取消\r\n            </Button>,\r\n            <Button key=\"2\" danger onClick={() => {\r\n                if (awardOptions.awards.length === 0) {\r\n                    message.warning(\"奖项不可为零\")\r\n                } else {\r\n                    props.backFromChild(awardOptions, memberOptions, true)\r\n                }\r\n            }}>\r\n                修改并重置\r\n            </Button>,\r\n            <Button key=\"3\" type=\"primary\" onClick={() => {\r\n                if (awardOptions.awards.length === 0) {\r\n                    message.warning(\"奖项不可为零\")\r\n                } else {\r\n                    props.backFromChild(awardOptions, memberOptions, false)\r\n                }\r\n            }}>\r\n                修改不重置\r\n            </Button>\r\n        ]}\r\n    >\r\n        <Tabs activeKey={activePane} onChange={(activeKey) => setActivePane(activeKey)}\r\n            tabBarExtraContent={[\r\n                <Button onClick={() => addRow(activePane)} key=\"2\" style={{ marginRight: 4 }}>\r\n                    <PlusCircleOutlined\r\n                        style={{ display: \"inline-grid\", placeItems: \"center\" }} />增加行</Button>,\r\n                <Button key=\"3\" danger type=\"primary\"\r\n                    onClick={() => setMemberOptions(Object.assign({}, memberOptions, {\r\n                        members: []\r\n                    }))}>清空人员</Button>\r\n            ]}>\r\n            <TabPane tab=\"奖品\" key=\"1\">\r\n                <Table\r\n                    columns={awardColumns}\r\n                    dataSource={awardOptions.awards}\r\n                    rowKey={(record) => record.key}\r\n                    pagination={false}></Table>\r\n            </TabPane>\r\n            <TabPane tab=\"人员\" key=\"2\">\r\n                <input\r\n                    type='file'\r\n                    accept='.xlsx, .xls' style={{ display: \"inline-block\", width: \"auto\" }} onChange={(e) => {\r\n                        e.persist()\r\n                        addMemberFromFile(e.target)\r\n                        e.target.value = \"\"//解决重复文件上传不触发onChange\r\n                    }} />\r\n                {upLoadStatus === \"1\" ?\r\n                    <span style={{ color: \"green\" }}>上传成功</span>\r\n                    : upLoadStatus === \"2\" ?\r\n                        <span style={{ color: \"red\" }}>上传失败</span>\r\n                        : null\r\n\r\n                }\r\n                <Table\r\n                    size=\"small\"\r\n                    columns={palyerColumns}\r\n                    dataSource={memberOptions.members}\r\n                    rowKey={(record) => record.key}\r\n                    pagination={false}\r\n                    scroll={{ y: 300 }}></Table>\r\n            </TabPane>\r\n\r\n        </Tabs>\r\n\r\n    </Modal>\r\n}\r\nexport default SettingModal;","import React, { Fragment } from 'react';\r\nimport { HashRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\r\n\r\nimport HomePage from '@pages/HomePage';\r\n// import SettingPage from '@pages/SettingPage';\r\n// import LotteryPage from '@pages/LotteryPage';\r\n\r\n\r\nconst PageMainRouter = (props: any) => <Fragment>\r\n    <Router>\r\n        <Switch>\r\n            <Redirect exact from=\"/\" to=\"/home\" />\r\n            <Route exact path=\"/home\" component={HomePage} />\r\n            {/* 不分页面了，直接一个页面里解决 */}\r\n            {/* <Route exact path=\"/setting\" component={SettingPage} />\r\n            <Route exact path=\"/lottery\" component={LotteryPage} />\r\n            <Route exact path=\"/demoTailwind\" component={DemoTailwindPage} /> */}\r\n        </Switch>\r\n    </Router>\r\n\r\n</Fragment>\r\n\r\nexport default PageMainRouter","import React from 'react';\r\nimport PageMainRouter from '@pages/router'\r\n\r\nimport './App.less';\r\n\r\nfunction App() {\r\n  return (\r\n    <PageMainRouter />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  //   <App />\r\n  // </React.StrictMode>,\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { resolve } from 'dns';\r\nimport XLSX from 'xlsx';\r\n\r\nexport const importExcel = (e_target: any) => new Promise((resolve: (value: any) => void) => {\r\n    let wb;// 读取完成的数据  \r\n    // 导入 \r\n\r\n    if (!e_target.files) {\r\n        resolve(false);\r\n    }\r\n    const firstfile = e_target.files[0];\r\n\r\n    //文件读取   \r\n    const reader = new FileReader();\r\n    reader.onload = function (e: any) {\r\n        const data = e.target.result;\r\n        //将文件读取为二进制字符串  \r\n        wb = XLSX.read(data, { type: 'binary' });\r\n\r\n\r\n        // console.log(wb.SheetNames[0]);// wb.SheetNames[0]是获取Sheets中第一个Sheet的名字\r\n        // wb.Sheets[Sheet名]获取第一个Sheet的数据\r\n\r\n        let josonarray = XLSX.utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]])\r\n\r\n\r\n        if (josonarray) {\r\n\r\n\r\n            josonarray = josonarray.map((item: any) => {\r\n                if (item[\"编号\"] && item[\"姓名\"]) {\r\n\r\n                    return { usercode: item[\"编号\"], username: item[\"姓名\"] }\r\n                }\r\n            });\r\n            // console.log(JSON.stringify(josonarray));\r\n\r\n            resolve(josonarray);\r\n        } else {\r\n            resolve(false);\r\n        }\r\n\r\n    };\r\n    reader.readAsBinaryString(firstfile);\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const exportExcel = (export_json: any) => {\r\n\r\n\r\n\r\n\r\n    let SheetNames_array: any = [];\r\n    Object.keys(export_json).map((awardlevel: any) => {\r\n        SheetNames_array.push(awardlevel)\r\n        export_json[awardlevel] = export_json[awardlevel].map((item: any) => ({ \"编号\": item.usercode, \"姓名\": item.username }))\r\n        export_json[awardlevel] = XLSX.utils.json_to_sheet(export_json[awardlevel]);\r\n    })\r\n    const wb = { SheetNames: SheetNames_array, Sheets: export_json, Props: {} };\r\n\r\n\r\n    const str = XLSX.write(wb, {\r\n        bookType: 'xlsx', // 输出的文件类型\r\n        type: 'buffer', // 输出的数据类型\r\n        compression: true // 开启zip压缩\r\n    });\r\n\r\n    const buffer = new ArrayBuffer(str.length);\r\n    let view = new Uint8Array(buffer);\r\n    for (var i = 0; i != str.length; ++i) view[i] = str.charCodeAt(i) & 0xFF;\r\n\r\n    const e = document.createElement('a');\r\n    e.download = \"中奖结果.xlsx\";\r\n    e.style.display = 'none';\r\n\r\n    var blob = new Blob([buffer], { type: \"application/octet-stream\" });\r\n    e.href = URL.createObjectURL(blob);\r\n\r\n    document.body.appendChild(e);\r\n\r\n    e.click();\r\n\r\n    document.body.removeChild(e);\r\n}\r\n\r\nexport const downloadTemplate = () => {\r\n\r\n\r\n    const wb = {\r\n        SheetNames: [\"抽奖名单\"], Sheets: {\r\n            \"抽奖名单\": XLSX.utils.json_to_sheet([{ \"编号\": \"\", \"姓名\": \"\" }])\r\n        }, Props: {}\r\n    };\r\n\r\n\r\n    const str = XLSX.write(wb, {\r\n        bookType: 'xlsx', // 输出的文件类型\r\n        type: 'buffer', // 输出的数据类型\r\n        compression: true // 开启zip压缩\r\n    });\r\n\r\n    const buffer = new ArrayBuffer(str.length);\r\n    let view = new Uint8Array(buffer);\r\n    for (var i = 0; i != str.length; ++i) view[i] = str.charCodeAt(i) & 0xFF;\r\n\r\n    const e = document.createElement('a');\r\n    e.download = \"抽奖名单模板.xlsx\";\r\n    e.style.display = 'none';\r\n\r\n    var blob = new Blob([buffer], { type: \"application/octet-stream\" });\r\n    e.href = URL.createObjectURL(blob);\r\n\r\n    document.body.appendChild(e);\r\n\r\n    e.click();\r\n\r\n    document.body.removeChild(e);\r\n}\r\n"],"sourceRoot":""}